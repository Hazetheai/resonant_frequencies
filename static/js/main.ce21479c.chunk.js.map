{"version":3,"sources":["VisualInterface.js","socketForm.js","Speedometer.js","App.js","serviceWorker.js","index.js"],"names":["socket","socketIOClient","process","VisualInterface","useState","periodVal","setPeriodVal","granVal","setGranVal","scaleVal","setScaleVal","chooseBasis","e","emit","target","value","console","log","chooseShape","button","padding","margin","borderRadius","width","container","marginTop","display","slider","transform","style","className","type","onClick","onChange","min","step","max","SocketIOForm","userName","setUserName","userAge","setUserAge","sliderVal","setSliderVal","onSubmit","preventDefault","id","placeholder","Speedometer","useResponse","setResponse","useEffect","rejectUnauthorized","on","data","num","maxValue","needleColor","startColor","segments","endColor","needleTransition","ringWidth","textColor","flexDirection","App","alignItems","justifyContent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce21479c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nconst socket = socketIOClient(process.env.REACT_APP_SERVER_URL);\n\nconst VisualInterface = () => {\n  const [periodVal, setPeriodVal] = useState(10);\n  const [granVal, setGranVal] = useState(1);\n  const [scaleVal, setScaleVal] = useState(20);\n\n  const handleChangeP = e => {\n    setPeriodVal(e.target.value);\n    socket.emit(\"sliderPeriod\", periodVal);\n    console.log(\"sliderPeriod\", periodVal);\n  };\n  const handleChangeG = e => {\n    setGranVal(e.target.value);\n    socket.emit(\"sliderGranularity\", granVal);\n    console.log(\"sliderGranularity\", granVal);\n  };\n  const handleChangeS = e => {\n    setScaleVal(e.target.value);\n    socket.emit(\"sliderScale\", scaleVal);\n    console.log(\"sliderScale\", scaleVal);\n  };\n\n  const chooseBasis = e => {\n    socket.emit(\"basis\", e.target.value);\n    console.log(\"e.target.value\", e.target.value);\n  };\n\n  const chooseShape = e => {\n    socket.emit(\"shape\", e.target.value);\n    console.log(\"e.target.value\", e.target.value);\n  };\n\n  const button = {\n    padding: \"20px\",\n    margin: \"10px\",\n    borderRadius: \"5%\",\n    width: \"85px\"\n  };\n\n  const container = {\n    padding: \"30px\",\n    marginTop: \"20px\",\n    display: \"flex\"\n  };\n\n  const slider = {\n    transform: \"rotate(270deg)\"\n  };\n\n  return (\n    <div>\n      <div style={container} className=\"basis\">\n        <button\n          style={button}\n          type=\"submit\"\n          value=\"noise.cell\"\n          onClick={chooseBasis}\n        >\n          Cell\n        </button>\n        <button\n          style={button}\n          type=\"submit\"\n          value=\"noise.distorted\"\n          onClick={chooseBasis}\n        >\n          Distorted\n        </button>\n        <button\n          style={button}\n          type=\"submit\"\n          value=\"transfer.saw\"\n          onClick={chooseBasis}\n        >\n          Saw\n        </button>\n        <button\n          style={button}\n          type=\"submit\"\n          value=\"noise.voronoi\"\n          onClick={chooseBasis}\n        >\n          Voronoi\n        </button>\n      </div>\n      <div style={container} className=\"shape\">\n        <button\n          style={button}\n          type=\"submit\"\n          value=\"sphere\"\n          onClick={chooseShape}\n        >\n          Sphere\n        </button>\n        <button\n          style={button}\n          type=\"submit\"\n          value=\"cylinder\"\n          onClick={chooseShape}\n        >\n          Cylinder\n        </button>\n        <button\n          style={button}\n          type=\"submit\"\n          value=\"capsule\"\n          onClick={chooseShape}\n        >\n          Capsule\n        </button>\n        <button\n          style={button}\n          type=\"submit\"\n          value=\"torus\"\n          onClick={chooseShape}\n        >\n          Torus\n        </button>\n      </div>\n\n      <div className=\"sliders\" style={container}>\n        <div style={slider} className=\"period\">\n          <input\n            onChange={handleChangeP}\n            type=\"range\"\n            min=\"0\"\n            step=\"1\"\n            max=\"20\"\n            value={periodVal}\n          />\n        </div>\n        <div style={slider} className=\"granularity\">\n          <input\n            onChange={handleChangeG}\n            type=\"range\"\n            step=\".001\"\n            min=\"0\"\n            max=\"2\"\n            value={granVal}\n          />\n        </div>\n        <div style={slider} className=\"scale\">\n          <input\n            onChange={handleChangeS}\n            type=\"range\"\n            min=\"0\"\n            step=\"1\"\n            max=\"40\"\n            value={scaleVal}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default VisualInterface;\n","import React, { useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport \"./fix.css\";\nconst socket = socketIOClient(process.env.REACT_APP_SERVER_URL);\n\nconst SocketIOForm = () => {\n  const [userName, setUserName] = useState(\"\");\n  const [userAge, setUserAge] = useState(\"\");\n  const [sliderVal, setSliderVal] = useState(0);\n  const onSubmit = e => {\n    e.preventDefault();\n    socket.emit(\"talkbackN\", userName);\n    socket.emit(\"talkbackA\", userAge);\n\n    setUserName(\"\");\n    setUserAge(\"\");\n  };\n  const handleChange = e => {\n    setSliderVal(e.target.value);\n    socket.emit(\"slider\", sliderVal);\n    console.log(\"userName\", userName);\n  };\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <input\n          onChange={e => setUserName(e.target.value)}\n          value={userName}\n          type=\"text\"\n          id=\"name\"\n          placeholder=\"Write your name here\"\n        />\n        <input\n          onChange={handleChange}\n          type=\"range\"\n          min=\"0\"\n          max=\"10\"\n          value={sliderVal}\n        />\n\n        <input\n          onChange={e => setUserAge(e.target.value)}\n          value={userAge}\n          type=\"text\"\n          id=\"age\"\n          placeholder=\"Write your age here\"\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default SocketIOForm;\n","import React, { useState, useEffect } from \"react\";\nimport ReactSpeedometer from \"react-d3-speedometer\";\nimport socketIOClient from \"socket.io-client\";\n\nconst Speedometer = () => {\n  const [useResponse, setResponse] = useState(0);\n  useEffect(() => {\n    const socket = socketIOClient(process.env.REACT_APP_SERVER_URL, {\n      rejectUnauthorized: false\n    });\n    socket.on(\"outgoing data\", data => {\n      setResponse(data.num);\n    });\n    // socket.on(\"message\", data => setResponse(data));\n  }, []);\n  return (\n    <ReactSpeedometer\n      maxValue={140}\n      value={useResponse}\n      needleColor=\"black\"\n      startColor=\"orange\"\n      segments={10}\n      endColor=\"red\"\n      needleTransition={\"easeElastic\"}\n      ringWidth={30}\n      textColor={\"red\"}\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        width: \"50%\",\n        margin: \"auto\"\n      }}\n    />\n  );\n};\n\nexport default Speedometer;\n","import React from \"react\";\n\nimport VisualInterface from \"./VisualInterface\";\nimport SocketIOForm from \"./socketForm\";\nimport ReactSpeedometer from \"./Speedometer\";\nconst App = () => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        width: \"460px\",\n        margin: \"auto\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      }}\n    >\n      <VisualInterface />\n      <SocketIOForm />\n      <ReactSpeedometer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}